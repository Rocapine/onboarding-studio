drop policy "Users can update their own projects." on "public"."projects";

create table "public"."deployments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid not null,
    "project_id" uuid not null,
    "environment" text not null,
    "steps" jsonb not null
);


alter table "public"."deployments" enable row level security;

CREATE UNIQUE INDEX deployments_pkey ON public.deployments USING btree (id);

alter table "public"."deployments" add constraint "deployments_pkey" PRIMARY KEY using index "deployments_pkey";

alter table "public"."deployments" add constraint "deployments_created_by_fkey" FOREIGN KEY (created_by) REFERENCES auth.users(id) not valid;

alter table "public"."deployments" validate constraint "deployments_created_by_fkey";

alter table "public"."deployments" add constraint "deployments_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."deployments" validate constraint "deployments_project_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.user_has_access_to_project(project_id text)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$
  SELECT EXISTS (
    SELECT 1
    FROM projects p
    JOIN team_memberships tm ON p.team_id = tm.team_id
    WHERE p.id = user_has_access_to_project.project_id::uuid
      AND tm.user_id = auth.uid()
  );
$function$
;

CREATE OR REPLACE FUNCTION public.user_in_team(team_id text)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$
  SELECT EXISTS (
    SELECT 1
    FROM team_memberships
    WHERE user_id::uuid = auth.uid()::uuid AND team_memberships.team_id = user_in_team.team_id::uuid
  );
$function$
;

create or replace view "public"."user_projects" as  SELECT p.created_at,
    p.name,
    p.created_by,
    p.id,
    p.steps,
    p.team_id
   FROM (projects p
     JOIN team_memberships tm ON ((p.team_id = tm.team_id)))
  WHERE (tm.user_id = auth.uid());


create or replace view "public"."user_teams" as  SELECT team_memberships.team_id
   FROM team_memberships
  WHERE (team_memberships.user_id = auth.uid());


grant delete on table "public"."deployments" to "anon";

grant insert on table "public"."deployments" to "anon";

grant references on table "public"."deployments" to "anon";

grant select on table "public"."deployments" to "anon";

grant trigger on table "public"."deployments" to "anon";

grant truncate on table "public"."deployments" to "anon";

grant update on table "public"."deployments" to "anon";

grant delete on table "public"."deployments" to "authenticated";

grant insert on table "public"."deployments" to "authenticated";

grant references on table "public"."deployments" to "authenticated";

grant select on table "public"."deployments" to "authenticated";

grant trigger on table "public"."deployments" to "authenticated";

grant truncate on table "public"."deployments" to "authenticated";

grant update on table "public"."deployments" to "authenticated";

grant delete on table "public"."deployments" to "service_role";

grant insert on table "public"."deployments" to "service_role";

grant references on table "public"."deployments" to "service_role";

grant select on table "public"."deployments" to "service_role";

grant trigger on table "public"."deployments" to "service_role";

grant truncate on table "public"."deployments" to "service_role";

grant update on table "public"."deployments" to "service_role";

create policy "User has access to project"
on "public"."deployments"
as permissive
for all
to authenticated
using ((project_id IN ( SELECT user_projects.id
   FROM user_projects)))
with check ((project_id IN ( SELECT user_projects.id
   FROM user_projects)));


create policy "Team member can edit the project"
on "public"."projects"
as permissive
for update
to public
using ((EXISTS ( SELECT 1
   FROM team_memberships
  WHERE ((team_memberships.team_id = projects.team_id) AND (team_memberships.user_id = auth.uid())))))
with check ((EXISTS ( SELECT 1
   FROM team_memberships
  WHERE ((team_memberships.team_id = projects.team_id) AND (team_memberships.user_id = auth.uid())))));


create policy "Users can update their own projects."
on "public"."projects"
as permissive
for update
to public
using ((auth.uid() = created_by))
with check ((auth.uid() = created_by));



